<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>M-Cosmosss</title>
        <link>https://cosmos.red/</link>
        <description>Recent content on M-Cosmosss</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 25 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cosmos.red/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>InnoDB</title>
        <link>https://cosmos.red/p/mysql/</link>
        <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cosmos.red/p/mysql/</guid>
        <description>&lt;img src="https://cosmos.red/p/mysql/b.jpg" alt="Featured image of post InnoDB" /&gt;&lt;h1 id=&#34;mysql&#34;&gt;Mysql&lt;/h1&gt;
&lt;h2 id=&#34;p2&#34;&gt;P2&lt;/h2&gt;
&lt;h3 id=&#34;threads&#34;&gt;Threads&lt;/h3&gt;
&lt;h4 id=&#34;master-thread&#34;&gt;Master Thread&lt;/h4&gt;
&lt;p&gt;包含多个循环（主循环，background，flush，suspend）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志写入磁盘&lt;/li&gt;
&lt;li&gt;合并 Insert Buffer 到磁盘&lt;/li&gt;
&lt;li&gt;刷新脏页&lt;/li&gt;
&lt;li&gt;删除无用 Undo 页&lt;/li&gt;
&lt;li&gt;1.2.x 版本前，刷新脏页等 IO 速度硬编码，版本后添加 innodb_io_capacity 代表磁盘速度，此变量影响刷新页的速度&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;io-thread&#34;&gt;IO Thread&lt;/h4&gt;
&lt;p&gt;InnoDB 使用 Async IO ，IO Thread 负责这些异步 IO 请求的回调&lt;/p&gt;
&lt;h4 id=&#34;purge-thread&#34;&gt;Purge Thread&lt;/h4&gt;
&lt;p&gt;1.1 版本后，回收 Undo 页由主线程转为此线程负责&lt;/p&gt;
&lt;h4 id=&#34;page-cleaner-thread&#34;&gt;Page Cleaner Thread&lt;/h4&gt;
&lt;p&gt;1.2.x 版本后，刷新脏页由主线程转为此线程负责&lt;/p&gt;
&lt;h3 id=&#34;缓冲池&#34;&gt;缓冲池&lt;/h3&gt;
&lt;h4 id=&#34;页类型&#34;&gt;页类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引页、数据页、undo 页、插入缓冲 (insert buffer)、自适应哈希索引(adaptive hash index&amp;gt;、InnoDB 存储的锁信息（lockinfo)、数据字典信息(data dictionary) 等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;http://pic.cosmos.red//image-20210717031742053.png&#34; &gt;
		&lt;img src=&#34;http://pic.cosmos.red//image-20210717031742053.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210717031742053&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210717031742053&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;innodb_buffer_pool_instances&#34;&gt;innodb_buffer_pool_instances&lt;/h4&gt;
&lt;p&gt;设定缓冲池数量&lt;/p&gt;
&lt;h3 id=&#34;池内存管理&#34;&gt;池内存管理&lt;/h3&gt;
&lt;h4 id=&#34;改动过的-lru-算法&#34;&gt;改动过的 LRU 算法&lt;/h4&gt;
&lt;p&gt;LRU 列表中加入了 midpoint 位置：最新访问的页并不是直接放入到 LRU 列表的首部，而是放入到 LRU 列表的 midpoint 位置（默认配置下，该位置在 LRU 列表长度的 5/8 处）&lt;/p&gt;
&lt;p&gt;若直接将读取到的页放入到 LRU 的首部，那么某些 SQL 操作可能会使缓冲池中的页被刷新出，从而影响缓冲池的效率。常见的这类操作为索引或数据的扫描操作。这类操作需要访问表中的许多页，甚至是全部的页，而这些页通常来说又仅在这次查询操作中需要，并不是活跃的热点数据。如果页被放入 LRU 列表的首部，那么非常可能将所需要的热点数据页从 LRU 列表中移除，而在下一次需要读取该页时，InnoDB 存储引擎需要再次访问磁盘。&lt;/p&gt;
&lt;p&gt;innodb_old_blocks_time 控制的 Old 链表头部页面的转移策略。该 Page 需要在 Old 链表停留超过该时间，之后再次被访问，才会移动到 Young 链表。这么操作是避免 Young 链表被那些只在 innodb_old_blocks_time 时间间隔内频繁访问，之后就不被访问的页面塞满，从而有效的保护 Young 链表。&lt;/p&gt;
&lt;h4 id=&#34;缓冲命中率&#34;&gt;缓冲命中率&lt;/h4&gt;
&lt;p&gt;Buffer pool hit rate，表示缓冲池的命中率，这个例子中为 100%，说明缓冲池运行状态非常良好。通常该值不应该小于 95%。若发生 Buffer pool hit rate 的值小于 95% 这种情况，用户需要观察是否是由于全表扫描引起的 LRU 列表被污染的问题。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;http://pic.cosmos.red//image-20210719035257307.png&#34; &gt;
		&lt;img src=&#34;http://pic.cosmos.red//image-20210719035257307.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210719035257307&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210719035257307&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;checkpoint&#34;&gt;Checkpoint&lt;/h3&gt;
&lt;p&gt;将缓冲池中的脏页刷回到磁盘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缩短数据库的恢复时间&lt;/li&gt;
&lt;li&gt;缓冲池不够用时，将脏页刷新到磁盘&lt;/li&gt;
&lt;li&gt;重做日志不可用时，刷新脏页。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;sharp-checkpoint&#34;&gt;Sharp Checkpoint&lt;/h4&gt;
&lt;p&gt;一次性将 buffer pool 当中的所有脏页刷新到磁盘数据文件&lt;/p&gt;
&lt;h4 id=&#34;fuzzy-checkpointin&#34;&gt;Fuzzy checkpointin&lt;/h4&gt;
&lt;p&gt;一个后台进程，定期刷新 buffer pool 当中的脏页&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Master Thread Checkpoint：主线程定期异步地刷新一部分脏页&lt;/li&gt;
&lt;li&gt;FLUSH_LRU_LIST Checkpoint：LRU 中需保证的可用页不足时移除部分尾端页，其中的脏页被刷新&lt;/li&gt;
&lt;li&gt;Async/Sync Flush Checkpoint：redo log 不可用时&lt;/li&gt;
&lt;li&gt;Dirty Page too much Checkpoint：脏页过多，由参数 innodb_max_dirty_pages_pct 控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;插入缓冲-insert-buffer&#34;&gt;插入缓冲 Insert Buffer&lt;/h3&gt;
&lt;p&gt;聚集索引基本为递增，而非聚集索引大多为非顺序，插入操作需要随机写入会影响性能，因此插入缓冲在插入或更新操作，先判断插入的非聚集索引页在缓冲池中，则直接插入；若不在，则先放入到一个 Insert Buffer 对象中。再以一定的频率和情况进行 Insert Buffer 和辅助索引页子节点的 merge（合并）操作，大大的提升了非聚集索引的插入性能。&lt;/p&gt;
&lt;h4 id=&#34;实现&#34;&gt;实现&lt;/h4&gt;
&lt;p&gt;B+ Tree&lt;/p&gt;
&lt;h4 id=&#34;使用条件&#34;&gt;使用条件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;索引是辅助索引：聚集索引本来就是顺序&lt;/li&gt;
&lt;li&gt;索引不是唯一：如果是唯一索引，在插入时，需要查找辅助索引树，判断该记录是否存在以确保唯一性，查找过程就是随机读的过程，因此插入缓冲就没意义了&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;merge-场合&#34;&gt;Merge 场合&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;辅助索引页被读取到缓冲池时，也就是常规 SELECT 使用了辅助索引时&lt;/li&gt;
&lt;li&gt;Insert Buffer Bitmap 页追踪到该辅助索引页已无可用空间时&lt;/li&gt;
&lt;li&gt;Master Thread 定期合并&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;change-buffer&#34;&gt;change buffer&lt;/h4&gt;
&lt;p&gt;InnoDB 从1.0.x版本开始引入了 Change Buffer，可将其视为Insert Buffer 的升级。从这个版本开始，InnoDB存储引擎可以对 DML操作——INSERT、DELETE、UPDATE都进行缓冲，他们分别是: Insert Buffer、Delete Buffer、Purge buffer&lt;/p&gt;
&lt;h3 id=&#34;doublewrite&#34;&gt;Doublewrite&lt;/h3&gt;
&lt;h4 id=&#34;partial-write&#34;&gt;partial write&lt;/h4&gt;
&lt;p&gt;InnoDB 的 page size 默认是 16KB，而操作系统与物理磁盘的一个 block size 更小，这会导致在极端情况下 (断电 / os crash) 对磁盘的页写入只有部分成功，即无法确保页写入操作的原子性&lt;/p&gt;
&lt;h4 id=&#34;实现-1&#34;&gt;实现&lt;/h4&gt;
&lt;p&gt;doublewrite 是 Innodb 磁盘表空间内部分配的一片缓冲区，一般 double write 包含 128 个页，对于 pagesize 为 16k 的页，总共 2MB。Innodb 在磁盘写入时先将页写入 doublewrite 缓冲区，然后再将其从缓冲区写入真正的表内存储位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写 double write buffer 本身失败，那么这些数据不会被写到磁盘，InnoDB 此时会从磁盘载入原始的数据，然后通过 InnoDB 的事务日志来计算出正确的数据，重新写入到 double write buffer&lt;/li&gt;
&lt;li&gt;写 double write buffer 本身成功，写数据到磁盘失败，Innodb 存储引擎可以从共享表空间的 double write 中找到该页的副本，将其复制到表空间文件，再应用 redo log，就完成了恢复过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;redo-log-能否恢复&#34;&gt;redo log 能否恢复&lt;/h4&gt;
&lt;p&gt;纯物理日志实现 redo log 完全不依赖物理页的状态，并且是幂等性的，因此可以恢复 partial write&lt;/p&gt;
&lt;p&gt;而 innoDB 的 redo 采用的是物理逻辑结合型的日志。物理到具体的哪个 page，页内操作是逻辑的。这种方式既实现了物理日志带来的幂等性（以物理页为整体），又拥有逻辑日志带来的轻量性（物理页内修改是逻辑日志）。所以物理页内修改不是幂等的，需要使用 doublewrite 技术来保证写入的成功&lt;/p&gt;
&lt;h4 id=&#34;redo-log-是否需要保护&#34;&gt;redo log 是否需要保护&lt;/h4&gt;
&lt;p&gt;redo 日志的页大小一般设计为 512 Byte，不会出现 partial write&lt;/p&gt;
&lt;h4 id=&#34;others&#34;&gt;others&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;向磁盘上的 doublewrite 缓冲区写入时是顺序写入，因此性能影响不大。缓冲区再向各表同步时还是随机写入的&lt;/li&gt;
&lt;li&gt;若文件系统本身支持原子性写入，确保不会发生 partial write 就可以关闭 double write 来避免无意义的性能损失&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;自适应哈希索引&#34;&gt;自适应哈希索引&lt;/h3&gt;
&lt;p&gt;InnoDB 存储引擎会自动根据访问的频率和模式来自动地为某些热点页建立哈希索引，来提高查询效率。可以关闭该功能但不能强制启用哈希索引&lt;/p&gt;
&lt;h4 id=&#34;自动启用条件&#34;&gt;自动启用条件&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;连续查询的条件一样：例如不能交替查询 WHERE a=xxx 和 WHERE a=xxx and b=xxx&lt;/li&gt;
&lt;li&gt;连续用同样的模式访问100次&lt;/li&gt;
&lt;li&gt;页通过该模式访问了N次，其中N=页中记录*1/16 （没看懂）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;异步io--刷新邻接页&#34;&gt;异步IO / 刷新邻接页&lt;/h3&gt;
&lt;p&gt;常规特色也就是异步能避免 IO 阻塞线程；另一个优势是可以进行IO Merge操作，也就是将多个IO合并为1个IO，这样可以提高IOPS的性能&lt;/p&gt;
&lt;p&gt;当刷新一个脏页时，InnoDB存储引擎会检测该页所在区的所有页，如果是脏页，那么一起进行刷新。该工作机制在传统机械磁盘下有着显著的优势，但是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可能将不怎么脏的页进行了写人，而该页之后又会很快变成脏页&lt;/li&gt;
&lt;li&gt;固态硬盘有着较高的IOPS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此对于固态硬盘建议不启用此特性&lt;/p&gt;
&lt;h3 id=&#34;启动关闭与恢复&#34;&gt;启动关闭与恢复&lt;/h3&gt;
&lt;h4 id=&#34;innodb_fast-shutdown&#34;&gt;innodb_fast shutdown&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;0表示在MySQL数据库关闭时，InnoDB需要完成所有的full purge和 mergeinsert buffer，并且将所有的脏页刷新回磁盘。这需要一些时间，有时甚至需要几个小时来完成。如果在进行InnoDB升级时，必须将这个参数调为0，然后再关闭数据库。&lt;/li&gt;
&lt;li&gt;1是参数innodb_fast_shutdown 的默认值，表示不需要完成上述的full purge和merge insert buffer操作，但是在缓冲池中的一些数据脏页还是会刷新回磁盘。2表示不完成full purge和 merge insert buffer操作，也不将缓冲池中的数据脏页写回磁盘，而是将日志都写入日志文件。这样不会有任何事务的丢失，但是下次MySQL数据库启动时，会进行恢复操作（recovery)。&lt;/li&gt;
&lt;li&gt;2表示不完成full purge和 merge insert buffer操作，也不将缓冲池中的数据脏页写回磁盘，而是将日志都写入日志文件。这样不会有任何事务的丢失，但是下次MySQL数据库启动时，会进行恢复操作（recovery)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;innodb_force_recovery&#34;&gt;innodb_force_recovery&lt;/h4&gt;
&lt;p&gt;默认为0，可设置为1~6&lt;/p&gt;
&lt;p&gt;代表当发生需要恢复时，进行所有的恢复操作，当不能进行有效恢复时，如数据页发生了corruption，MySQL数据库可能发生宕机（crash)，并把错误写入错误日志中去&lt;/p&gt;
&lt;h2 id=&#34;p3&#34;&gt;P3&lt;/h2&gt;
&lt;h3 id=&#34;mysql参数&#34;&gt;mysql参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;static 静态变量：无法在实例生命周期内修改&lt;/li&gt;
&lt;li&gt;dynamic 动态参数：分为session级与global级&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;日志文件&#34;&gt;日志文件&lt;/h3&gt;
&lt;h4 id=&#34;error-log&#34;&gt;error log&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;错误日志文件对MySQL的启动、运行、关闭过程进行了记录，也包含一些警告与正确的信息&lt;/li&gt;
&lt;li&gt;文件路径定位：SHOW VARIABLES LIKE&amp;rsquo;log_error&#39;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;slow-log&#34;&gt;slow log&lt;/h4&gt;
&lt;p&gt;可以在 MySQL启动时设一个阈值，将运行时间大于（不包含等于）该值的所有SQL语句都记录到慢查询日志文件中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数：long_query_time。默认值为10，代表10秒。&lt;/li&gt;
&lt;li&gt;参数：log_slow_queries，是否启用 slow log 。默认不开启，需要手动设为 ON&lt;/li&gt;
&lt;li&gt;参数：log_queries_not_using_indexes，是否启用检测未使用索引的语句&lt;/li&gt;
&lt;li&gt;参数：log_throttle_queries_not_using_indexes，表示每分钟允许记录到 slow log 的且未使用索引的SQL语句次数。默认为0，表示无限制。此参数作用是防止过于频繁触发未使用索引检测，导致 slow log 过快无意义增长&lt;/li&gt;
&lt;li&gt;mysqldumpslow 命令辅助分析慢查询日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;InnoDB 额外统计了 SQL 执行中逻辑读取（包含物理读取与缓冲池读取）与物理读取的次数，观察它们的比例可以辅助判断是否需要优化&lt;/p&gt;
&lt;h3 id=&#34;查询日志&#34;&gt;查询日志&lt;/h3&gt;
&lt;p&gt;查询日志记录了所有对MySQL数据库请求的信息，无论这些请求是否得到了正确的执行。默认文件名为:主机名.log&lt;/p&gt;
&lt;h3 id=&#34;bin-log&#34;&gt;bin log&lt;/h3&gt;
&lt;p&gt;二进制日志记录了对 MySQL 数据厍执行更改的所有操作以及时间等信息，但是不包括 SELECT 和 SHOW 这类操作，因为这类操作对数据本身并没有修改&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若有 UPDATE 操作未对数据库产生变化，也会被记录在 bin log 中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要有以下作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;恢复（recovery）：某些数据的恢复需要二进制日志，例如在一个数据库全备文件恢复后，可以通过二进制日志进行 poing-in-time 的恢复&lt;/li&gt;
&lt;li&gt;复制（replication）：其原理与恢复类似，通过复制和执行二进制日志，使两台数据库实时同步&lt;/li&gt;
&lt;li&gt;审计（audit）：判断有无 sql 注入攻击&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缓存&#34;&gt;缓存&lt;/h4&gt;
&lt;p&gt;使用事务的引擎中，未提交的二进制日志会先写入缓存中（基于session）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binlog_cache_size：决定该缓存的大小&lt;/li&gt;
&lt;li&gt;缓存超出限制大小时会创建临时文件&lt;/li&gt;
&lt;li&gt;binlog_cache_use、binlog_cache_disk_use分别代表使用缓存与使用临时文件缓存二进制日志的次数，观察这俩变量可以得知缓存限制是否过小&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;同步&#34;&gt;同步&lt;/h4&gt;
&lt;p&gt;sync_binlog&lt;/p&gt;
&lt;p&gt;占坑&lt;/p&gt;
&lt;h4 id=&#34;格式&#34;&gt;格式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Statement：记录 SQL 语句&lt;/li&gt;
&lt;li&gt;Row：记录每一行变化的二进制原始数据&lt;/li&gt;
&lt;li&gt;MIXED：以上两种混合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优劣：https://zhuanlan.zhihu.com/p/26977878&lt;/p&gt;
&lt;h3 id=&#34;redo-log&#34;&gt;redo log&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;二进制日志会记录所有与MySQL数据库有关的日志记录，包括InnoDB、MylSAM、Heap等其他存储引擎的日志。而InnoDB存储引擎的重做日志只记录有关该存储引擎本身的事务日志&lt;/li&gt;
&lt;li&gt;其次，记录的内容不同，无论用户将二进制日志文件记录的格式设为STATEMENT还是ROW，又或者是MIXED，其记录的都是关于一个事务的具体操作内容，即该日志是逻辑日志。而InnoDB存储引擎的重做日志文件记录的是关于每个页(Page）的更改的物理情况。&lt;/li&gt;
&lt;li&gt;此外，写入的时间也不同，二进制日志文件仅在事务提交前进行提交，即只写磁盘一次，不论这时该事务多大。而在事务进行的过程中，却不断有重做日志条目（redocntry）被写入到重做日志文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;上面提过，redo log写入单位为512字节，能保证写入的原子性因此不需要 double write 机制保护&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体还是等事务部分细说，占坑&lt;/p&gt;
&lt;h2 id=&#34;p5-索引与算法&#34;&gt;P5 索引与算法&lt;/h2&gt;
&lt;h3 id=&#34;b-tree&#34;&gt;B+ tree&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;InnoDB中一般为2-4层，以适应磁盘随机读取开销较大的特性，在查询时降低随机 IO 次数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;插入&#34;&gt;插入&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;http://pic.cosmos.red//image-20210823100442159.png&#34; &gt;
		&lt;img src=&#34;http://pic.cosmos.red//image-20210823100442159.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210823100442159&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210823100442159&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以此图为例，插入70&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;拆分：&lt;figure 
	&gt;
	&lt;a href=&#34;http://pic.cosmos.red//image-20210823100516595.png&#34; &gt;
		&lt;img src=&#34;http://pic.cosmos.red//image-20210823100516595.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210823100516595&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210823100516595&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;旋转：当左右兄弟节点未满时，优先使用旋转提高效率&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;http://pic.cosmos.red//image-20210823100624552.png&#34; &gt;
		&lt;img src=&#34;http://pic.cosmos.red//image-20210823100624552.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210823100624552&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210823100624552&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;索引&#34;&gt;索引&lt;/h3&gt;
&lt;p&gt;采用B+ 树结构，叶子节点由双向链表连接&lt;/p&gt;
&lt;h4 id=&#34;创建索引&#34;&gt;创建索引&lt;/h4&gt;
&lt;p&gt;ALTER TABLE tbl_name&lt;/p&gt;
&lt;p&gt;CREATE [UNIQUE] INDEX index_name [index_type] ON tbl_name&lt;/p&gt;
&lt;h4 id=&#34;聚焦索引&#34;&gt;聚焦索引&lt;/h4&gt;
&lt;p&gt;每张表仅有一个，以主键为索引，叶子节点（数据页）存放的是完整行数据&lt;/p&gt;
&lt;h5 id=&#34;主键&#34;&gt;主键&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;不可修改（？）：因为主键的第二个作用是让其他表的外键引用自己，从而实现关系结构。一旦某个表的主键发生了变化，就会导致所有引用了该表的数据必须全部修改外键。很多Web应用的数据库并不是强约束（仅仅引用主键但并没有设置外键约束），修改主键会导致数据完整性直接被破坏&lt;/li&gt;
&lt;li&gt;业务无关：为满足不可修改原则，主键不能与业务有关联&lt;/li&gt;
&lt;li&gt;不宜过大：辅助索引的值为主键，因为主键的大小会影响辅助索引大小&lt;/li&gt;
&lt;li&gt;推荐使用自增：因为innodb是B+ 树结构，自增主键导致新增行时是高性能的顺序写入，同时避免了B+ 树的拆分。也因此对范围查询拥有高性能&lt;/li&gt;
&lt;li&gt;自增主键也会遇到自增锁的性能问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;辅助索引非聚焦索引&#34;&gt;辅助索引/非聚焦索引&lt;/h4&gt;
&lt;p&gt;叶子节点只存放主键，因此需要根据主键在聚焦索引里二次查询才能得到完整行内容，这个过程称为回表&lt;/p&gt;
&lt;h4 id=&#34;联合索引&#34;&gt;联合索引&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;http://pic.cosmos.red//image-20210824170734902.png&#34; &gt;
		&lt;img src=&#34;http://pic.cosmos.red//image-20210824170734902.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210824170734902&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210824170734902&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对多个列组合起来的索引，如 (a,b) 索引将先按 a 再按 b 排序。因此针对 a 或者 a&amp;amp;&amp;amp;b 的条件查询都可以使用该索引，但是 b 条件不行，因为此联合索引没有按 b 的顺序&lt;/p&gt;
&lt;p&gt;也因为多列索引都以排序这个特性，可以免去部分范围查询的二次排序&lt;/p&gt;
&lt;h4 id=&#34;覆盖索引&#34;&gt;覆盖索引&lt;/h4&gt;
&lt;p&gt;当只在辅助索引（一般即为联合索引）中就能得到查询的记录时，即可省去回表这步&lt;/p&gt;
&lt;p&gt;使用统计（COUNT）时也会优先使用可行的联合索引，因为单节点小，同页节点多查询更快&lt;/p&gt;
&lt;h4 id=&#34;fast-index-creation&#34;&gt;Fast Index Creation&lt;/h4&gt;
&lt;p&gt;在5.5版本前，索引的添加或删除需要创建并导入原表数据到一张新表，因此需要宕机很长的时间&lt;/p&gt;
&lt;p&gt;5.5版本后有了 FIC 对创建索引的表加上 S 锁，不再需要创建新表因此速度大大提高，此技术仅适用于辅助索引。但这个过程中对表只能读不能写&lt;/p&gt;
&lt;h4 id=&#34;cardinality&#34;&gt;Cardinality&lt;/h4&gt;
&lt;p&gt;代表索引中不重复记录的比例，即索引的『选择性』。如性别列中只会有F,M两个选项，就只有50%的选择性&lt;/p&gt;
&lt;p&gt;当 Cardinality 值过低代表该索引低选择性，为其建立索引的意义较低&lt;/p&gt;
&lt;p&gt;Cardinality 的统计是由引擎层实现的。InnoDB 中 Cardinality 值是随机对8个叶子节点采样统计，因此表未改动的情况下该值也可能不同。统计 Cardinality 可能会产生较大的性能损耗，因此不应随意进行&lt;/p&gt;
&lt;h4 id=&#34;mrr--multi-range-read&#34;&gt;MRR / Multi-Range Read&lt;/h4&gt;
&lt;p&gt;在进行如范围查询这种需要批量回表操作的查询时，若不做任何优化则回表查询会是随机读取，而 MRR 的作用就是在回表前，对这一批查询根据主键进行排序再回表，这样回表就变成了较为顺序的读取，从而提高性能&lt;/p&gt;
&lt;h4 id=&#34;icp--索引条件下推优化&#34;&gt;ICP / 索引条件下推优化&lt;/h4&gt;
&lt;p&gt;开启 ICP 时，使用辅助索引进行条件查询，会在查询辅助索引的同时就判断是否可以进行 WHERE 条件的过滤，过滤掉已经不符合要求的行后再回表。未开启 ICP 则不会有这步过滤，而只会回表取出所有完整行数据再进行过滤。ICP 相当于辅助索引查询时，利用联合索引已经包含多个列信息的特点，提前进行可能的 WHERE 条件筛选，从而减少不必要的回表来提高性能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;适用于 InnoDB 和 MyISAM&lt;/li&gt;
&lt;li&gt;显然，只有联合索引才可能在查询时提前过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;启用 ICP 的情况下利用二级索引查找数据的过程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用二级索引查找数据的主键；&lt;/li&gt;
&lt;li&gt;如果二级索引记录的元组里的列出现在 where 条件里，那么对元组进行过滤；&lt;/li&gt;
&lt;li&gt;对索引元组的主键回表读取完整的行记录；&lt;/li&gt;
&lt;li&gt;利用 where 语句的剩余条件对行记录进行过滤；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;全文索引&#34;&gt;全文索引&lt;/h4&gt;
&lt;p&gt;InnoDB 使用 full inverted index 形式的倒排索引，记录了每个单词出现在哪个文档以及在其中的位置&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;http://pic.cosmos.red//image-20210825174421628.png&#34; &gt;
		&lt;img src=&#34;http://pic.cosmos.red//image-20210825174421628.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210825174421628&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210825174421628&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;http://pic.cosmos.red//image-20210825174429861.png&#34; &gt;
		&lt;img src=&#34;http://pic.cosmos.red//image-20210825174429861.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210825174429861&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210825174429861&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h5 id=&#34;用法&#34;&gt;用法&amp;hellip;&lt;/h5&gt;
&lt;h2 id=&#34;p6-锁&#34;&gt;P6 锁&lt;/h2&gt;
&lt;h3 id=&#34;lock--latch&#34;&gt;lock / latch&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;http://pic.cosmos.red//image-20210825182952229.png&#34; &gt;
		&lt;img src=&#34;http://pic.cosmos.red//image-20210825182952229.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;image-20210825182952229&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;image-20210825182952229&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;mvcc&#34;&gt;MVCC&lt;/h3&gt;
</description>
        </item>
        <item>
        <title>Hello World</title>
        <link>https://cosmos.red/p/hello-world/</link>
        <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
        
        <guid>https://cosmos.red/p/hello-world/</guid>
        <description>&lt;img src="https://cosmos.red/p/hello-world/a.png" alt="Featured image of post Hello World" /&gt;&lt;h1 id=&#34;now-loading&#34;&gt;Now Loading!!!&lt;/h1&gt;
</description>
        </item>
        
    </channel>
</rss>
