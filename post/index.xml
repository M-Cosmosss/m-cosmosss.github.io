<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on M-Cosmosss</title>
    <link>https://cosmos.red/post/</link>
    <description>Recent content in Posts on M-Cosmosss</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://cosmos.red/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Innodb 是如何实现 RR 并解决幻读的</title>
      <link>https://cosmos.red/p/innodb-%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-rr-%E5%B9%B6%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB%E7%9A%84/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cosmos.red/p/innodb-%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-rr-%E5%B9%B6%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB%E7%9A%84/</guid>
      <description>pixiv：92080599
Innodb 是如何解决脏读、幻读的 幻读 幻读比较容易与不可重复读搞混，先看看他们的定义：
  不可重复读：在当前事务多次读时，读到因其他事务提交而前后不一致的数据
  幻读：在同一事务中，相同查询条件的多次查询读取的数据总量不一致
  提出并解决这些事务问题，都是为了保证在单一事务中不受其他事务的影响。
解决不可重复读是为了保证，在本事务中 SELECT 得到的结果不会被其他事务影响而改变。一种解决思路是，只需要对 SELECT 的结果行加锁即可。
但在此之外还会有其他的干扰情况：就算锁住了查找结果，相同的 SELECT 语句仍然可能出现不一样的结果。因为其他事务的 INSERT 操作可能会插入满足之前 SELECT 条件的新数据行。尽管原 SELECT 语句的行数据保证不变，但再次查找就可能多出了几行，如同幻觉一般。这就是与不可重复读不同的另一种事务问题，幻读。
可重复读 Repeatable Read 显然，可重复读针对的就是『不可重复读』问题，也是 Innodb 默认的隔离级别
其实可以通过一个最简单的例子整体思考下事务的目的以及问题：
 事务 T1 查找结果为行 A ，然后事务 T2 想更新行 A 中的数据
 如果要解决『不可重复读』，那么有两种解决思路：
  直接阻止 T2 的操作。
在『串行化』隔离级别中，事务中的查找操作也会上锁，因此有着最好的隔离性。在『串行化』以外的隔离级别，也可以使用 select &amp;hellip; for update / lock in share mode 手动对查找操作上锁。但缺点也显而易见，这么做会导致并发性能极差。
  在不阻止 T2 操作的情况下，有没有方法阻止『不可重复读』？
有。其实可以关注到，『不可重复读』要求事务多次读到的数据不变，而不是该数据本身不能变。如果为数据建立快照，就可以同时满足『不变』与『修改』。这种思路可以极大提高并发性能，但尽管符合了『可重复读』的要求，但读到的非实时数据也会成为一个隐患，尤其是在对数据实时性要求高的场合
  这个例子主要表明：在实现事务隔离的情况下，也可以用一定的妥协来换取性能。毕竟『串行化』的实现最简单也最安全，但并发性能需求在大多数场合中，比保证数据的绝对实时性更重要。因此多版本并发控制 MVCC 应运而生</description>
    </item>
    
    <item>
      <title>《Mysql 技术内幕》阅读笔记</title>
      <link>https://cosmos.red/p/mysql-%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cosmos.red/p/mysql-%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>Mysql P2 Threads Master Thread 包含多个循环（主循环，background，flush，suspend）
 日志写入磁盘 合并 Insert Buffer 到磁盘 刷新脏页 删除无用 Undo 页 1.2.x 版本前，刷新脏页等 IO 速度硬编码，版本后添加 innodb_io_capacity 代表磁盘速度，此变量影响刷新页的速度  IO Thread InnoDB 使用 Async IO ，IO Thread 负责这些异步 IO 请求的回调
Purge Thread 1.1 版本后，回收 Undo 页由主线程转为此线程负责
Page Cleaner Thread 1.2.x 版本后，刷新脏页由主线程转为此线程负责
缓冲池 页类型  索引页、数据页、undo 页、插入缓冲 (insert buffer)、自适应哈希索引(adaptive hash index&amp;gt;、InnoDB 存储的锁信息（lockinfo)、数据字典信息(data dictionary) 等   
innodb_buffer_pool_instances 设定缓冲池数量
池内存管理 改动过的 LRU 算法 LRU 列表中加入了 midpoint 位置：最新访问的页并不是直接放入到 LRU 列表的首部，而是放入到 LRU 列表的 midpoint 位置（默认配置下，该位置在 LRU 列表长度的 5/8 处）</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://cosmos.red/p/hello-world/</link>
      <pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://cosmos.red/p/hello-world/</guid>
      <description>Now Loading!!! </description>
    </item>
    
  </channel>
</rss>
